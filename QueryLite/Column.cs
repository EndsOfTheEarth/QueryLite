/*
 * MIT License
 *
 * Copyright (c) 2023 EndsOfTheEarth
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 **/
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace QueryLite {

    public interface ISelectable {
        
    }

    public interface IField : ISelectable, IOrderByColumn {

        Type Type { get; }

        /// <summary>
        /// Order by ascending
        /// </summary>
        IOrderByColumn ASC { get; }

        /// <summary>
        /// Order by descending
        /// </summary>
        IOrderByColumn DESC { get; }
    }

    public interface IColumn : IField {

        /// <summary>
        /// Table column belongs to
        /// </summary>
        ITable Table { get; }

        /// <summary>
        /// Name of column in database table
        /// </summary>
        string ColumnName { get; }

        /// <summary>
        /// Character column length in database
        /// </summary>
        int? Length { get; }

        /// <summary>
        /// Is column auto generated by the database server?
        /// </summary>
        bool IsAutoGenerated { get; }

        /// <summary>
        /// Is column nullable in the database schema?
        /// </summary>
        bool IsNullable { get; }

        /// <summary>
        /// Enclose column name in sql query. For example enclose column name with [] (square brackets) in sql server queries.
        /// </summary>
        bool Enclose { get; }
    }

    [DebuggerDisplay("Column Name: {ColumnName}, .net Type: {Type.FullName}, IsNullable: {IsNullable}, Length: {Length}")]
    public abstract class AColumn<TYPE> : IColumn where TYPE : notnull {

        /// <summary>
        /// Table this column belongs to
        /// </summary>
        public ITable Table { get; }

        /// <summary>
        /// Name of column
        /// </summary>
        public string ColumnName { get; }

        /// <summary>
        /// Column length. Only available for appropriate column types.
        /// </summary>
        public int? Length { get; }

        /// <summary>
        /// Is this column value automatically generated by the database server
        /// </summary>
        public bool IsAutoGenerated { get; }

        /// <summary>
        /// Does this column allow nulls
        /// </summary>
        public bool IsNullable { get; protected set; } = false;

        public bool Enclose { get; }

        /// <summary>
        /// Column C# data type
        /// </summary>
        public Type Type { get; }

        public AColumn(ITable table, string columnName, bool isAutoGenerated = false, int? length = null, bool enclose = false) {

            ArgumentNullException.ThrowIfNull(table, paramName: nameof(table));
            ArgumentException.ThrowIfNullOrEmpty(columnName, paramName: nameof(columnName));

            Table = table;
            ColumnName = columnName;
            IsAutoGenerated = isAutoGenerated;
            Length = length;
            Type = typeof(TYPE);
            Enclose = enclose;
        }

        public static ICondition operator ==(AColumn<TYPE> columnA, AColumn<TYPE> columnB) {
            return new GenericCondition(columnA, Operator.EQUALS, columnB);
        }
        public static ICondition operator !=(AColumn<TYPE> columnA, AColumn<TYPE> columnB) {
            return new GenericCondition(columnA, Operator.NOT_EQUALS, columnB);
        }

        public static ICondition operator ==(AColumn<TYPE> columnA, AFunction<TYPE> columnB) {
            return new GenericCondition(columnA, Operator.EQUALS, columnB);
        }
        public static ICondition operator !=(AColumn<TYPE> columnA, AFunction<TYPE> columnB) {
            return new GenericCondition(columnA, Operator.NOT_EQUALS, columnB);
        }

        /// <summary>
        /// Returns an equals condition for two columns that have different types in code.
        /// </summary>
        public ICondition SqlEquals_NonTypeSafe<TYPEB>(TYPEB columnB) where TYPEB : notnull {
            return new GenericCondition(this, Operator.EQUALS, columnB);
        }

        /// <summary>
        /// Returns a not equals condition for two columns that have different types in code.
        /// </summary>
        public ICondition SqlNotEquals_NonTypeSafe<TYPEB>(TYPEB columnB) where TYPEB : notnull {
            return new GenericCondition(this, Operator.NOT_EQUALS, columnB);
        }

        public static ICondition operator ==(AColumn<TYPE> columnA, TYPE value) {
            return new GenericCondition(columnA, Operator.EQUALS, value);
        }
        public static ICondition operator !=(AColumn<TYPE> columnA, TYPE value) {
            return new GenericCondition(columnA, Operator.NOT_EQUALS, value);
        }

        public ICondition In(IEnumerable<TYPE> list) {
            return new InNotInCondition<TYPE>(this, isIn: true, list: list);
        }
        public ICondition NotIn(IEnumerable<TYPE> list) {
            return new InNotInCondition<TYPE>(this, isIn: false, list: list);
        }

        public ICondition In(params TYPE[] list) {
            return new InNotInCondition<TYPE>(this, isIn: true, list: list);
        }
        public ICondition NotIn(params TYPE[] list) {
            return new InNotInCondition<TYPE>(this, isIn: false, list: list);
        }

        public ICondition In<RESULT>(IExecute<RESULT> query) {
            return new InNotInNestedQueryCondition<TYPE, RESULT>(this, isIn: true, nestedQuery: query);
        }
        public ICondition NotIn<RESULT>(IExecute<RESULT> query) {
            return new InNotInNestedQueryCondition<TYPE, RESULT>(this, isIn: false, nestedQuery: query);
        }

        //
        //  Numeric conditions
        //
        public static ICondition operator <(AColumn<TYPE> condition, Column<TYPE> columnB) {
            return new GenericCondition(condition.Field, Operator.LESS_THAN, columnB);
        }
        public static ICondition operator >(AColumn<TYPE> condition, Column<TYPE> columnB) {
            return new GenericCondition(condition.Field, Operator.GREATER_THAN, columnB);
        }

        public static ICondition operator <=(AColumn<TYPE> condition, Column<TYPE> columnB) {
            return new GenericCondition(condition.Field, Operator.LESS_THAN_OR_EQUAL, columnB);
        }
        public static ICondition operator >=(AColumn<TYPE> condition, Column<TYPE> columnB) {
            return new GenericCondition(condition.Field, Operator.GREATER_THAN_OR_EQUAL, columnB);
        }

        public static ICondition operator <(AColumn<TYPE> condition, TYPE value) {
            return new GenericCondition(condition.Field, Operator.LESS_THAN, value);
        }
        public static ICondition operator >(AColumn<TYPE> condition, TYPE value) {
            return new GenericCondition(condition.Field, Operator.GREATER_THAN, value);
        }

        public static ICondition operator <=(AColumn<TYPE> condition, TYPE value) {
            return new GenericCondition(condition.Field, Operator.LESS_THAN_OR_EQUAL, value);
        }
        public static ICondition operator >=(AColumn<TYPE> condition, TYPE value) {
            return new GenericCondition(condition.Field, Operator.GREATER_THAN_OR_EQUAL, value);
        }

        public ICondition Like(ILike<TYPE> like) {
            return new GenericCondition(Field, Operator.LIKE, like.Expression);
        }
        public ICondition NotLike(ILike<TYPE> like) {
            return new GenericCondition(Field, Operator.NOT_LIKE, like.Expression);
        }

        public ICondition IsNull => new NullNotNullCondition<TYPE>(this, isNull: true);
        public ICondition IsNotNull => new NullNotNullCondition<TYPE>(this, isNull: false);

        public IOrderByColumn ASC => new OrderByColumn(this, OrderBy.ASC);

        public IOrderByColumn DESC => new OrderByColumn(this, OrderBy.DESC);

        public IField Field => this;
        public OrderBy OrderBy => OrderBy.Default;

        public override int GetHashCode() {
            return base.GetHashCode();
        }
        public override bool Equals(object? obj) {
            return base.Equals(obj);
        }
    }

    public interface ILike<VALUE> {
        string Expression { get; }
    }

    public sealed class StringLike : ILike<string> {

        public string Expression { get; }

        public StringLike(string expression) {
            Expression = expression;
        }
    }
    
    /// <summary>
    /// Represents a non-nullable table column
    /// </summary>
    /// <typeparam name="TYPE"></typeparam>
    public sealed class Column<TYPE> : AColumn<TYPE> where TYPE : notnull {

        public Column(ITable table, string columnName, bool isAutoGenerated = false, int? length = null, bool enclose = false)
            : base(
                  table: table,
                  columnName: columnName,
                  isAutoGenerated: isAutoGenerated,
                  length: length,
                  enclose: enclose) {

            IsNullable = false;
        }
    }

    /// <summary>
    /// Represents a nullable table column
    /// </summary>
    /// <typeparam name="TYPE"></typeparam>
    public sealed class NullableColumn<TYPE> : AColumn<TYPE> where TYPE : notnull {

        public NullableColumn(ITable table, string columnName, bool isAutoGenerated = false, int? length = null, bool enclose = false)
            : base(
                  table: table,
                  columnName: columnName,
                  isAutoGenerated: isAutoGenerated,
                  length: length,
                  enclose: enclose) {

            IsNullable = true;
        }
    }

    public interface IOrderByColumn {

        IField Field { get; }
        OrderBy OrderBy { get; }
    }

    public sealed class OrderByColumn : IOrderByColumn {

        public IField Field { get; }
        public OrderBy OrderBy { get; }

        public OrderByColumn(IField field, OrderBy orderBy) {
            Field = field;
            OrderBy = orderBy;
        }
    }
    /// <summary>
    /// Query order by
    /// </summary>
    public enum OrderBy {
        /// <summary>
        /// Ascending
        /// </summary>
        ASC,

        /// <summary>
        /// Descending
        /// </summary>
        DESC,

        /// <summary>
        /// Default sort order that is defined by the database server
        /// </summary>
        Default
    }
}