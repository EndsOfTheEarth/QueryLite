/*
 * MIT License
 *
 * Copyright (c) 2023 EndsOfTheEarth
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 **/
using QueryLite.DbSchema.Tables;
using QueryLite.DbSchema.Tables.PostgreSql;
using System;
using System.Collections.Generic;

namespace QueryLite.DbSchema {

    using TableColumnKey = Key<StringKey<ISchemaName>, StringKey<ITableName>, StringKey<IColumnName>>;
    using TableKey = Key<StringKey<ISchemaName>, StringKey<ITableName>>;

    public sealed class PostgreSqlSchemaLoader {

        public static List<DatabaseTable> LoadTables(IDatabase database) {

            List<DatabaseTable> tableList = new List<DatabaseTable>();
            Dictionary<TableKey, DatabaseTable> tableLookup = new Dictionary<TableKey, DatabaseTable>();
            Dictionary<string, Type?> typelookup = new Dictionary<string, Type?>();

            /*
             * Load tables and columns
             **/
            TablesTable tablesTable = TablesTable.Instance;
            ColumnsTable columnsTable = ColumnsTable.Instance;

            var query = Query
                .Select(
                    result => new {
                        Table_schema = result.Get(tablesTable.Table_schema),
                        Table_name = result.Get(tablesTable.Table_name),
                        Table_type = result.Get(tablesTable.Table_type),
                        ColumnsRow = new ColumnsRow(result, columnsTable)
                    }
                )
                .From(tablesTable)
                .Join(columnsTable).On(tablesTable.Table_schema == columnsTable.Table_schema & tablesTable.Table_name == columnsTable.Table_name)
                //.Where(tablesTable.Table_schema != StringKey<ISchemaName>.ValueOf("pg_catalog") & tablesTable.Table_schema != StringKey<ISchemaName>.ValueOf("information_schema"))
                .OrderBy(columnsTable.Ordinal_position)
                .Execute(database);

            for(int index = 0; index < query.Rows.Count; index++) {

                var row = query.Rows[index];

                TableKey tableKey = new TableKey(row.Table_schema, row.Table_name);

                if(!tableLookup.TryGetValue(tableKey, out DatabaseTable? databaseTable)) {
                    databaseTable = new DatabaseTable(schema: row.Table_schema, tableName: row.Table_name, isView: row.Table_type == "VIEW");
                    tableList.Add(databaseTable);
                    tableLookup.Add(tableKey, databaseTable);
                }

                ColumnsRow columnRow = row.ColumnsRow;

                if(!typelookup.TryGetValue(columnRow.Data_type, out Type? dotNetType)) {
                    dotNetType = PostgreSqlTypes.GetDotNetType(columnRow.Data_type);
                    typelookup.Add(columnRow.Data_type, dotNetType);
                }

                DataType dataType = new DataType(name: columnRow.Data_type, dotNetType: (dotNetType ?? typeof(IUnknownType)));

                int? length = null;

                if(columnRow.Character_octet_length != null) {
                    length = columnRow.Character_octet_length.Value;
                }

                if(columnRow.Character_maximum_length != null) {
                    length = columnRow.Character_maximum_length.Value;
                }

                bool isNullable = string.Compare(columnRow.Is_nullable, "YES", true) == 0;

                bool isAutoGenerated = (columnRow.Column_default ?? string.Empty).StartsWith("nextval");

                DatabaseColumn databaseColumn = new DatabaseColumn(
                    table: databaseTable,
                    columnName: columnRow.Column_name,
                    dataType: dataType,
                    sqlDataTypeName: columnRow.Data_type,
                    length: length,
                    isNullable: isNullable,
                    isAutoGenerated: isAutoGenerated
                );
                databaseTable!.Columns.Add(databaseColumn);
            }

            SetPrimaryKeys(tableList, database);
            SetUniqueConstraints(tableList, database);
            SetForeignKeys(tableList, database);

            LoadCommentMetaData(tableList, database);

            return tableList;
        }

        private static void SetPrimaryKeys(List<DatabaseTable> tableList, IDatabase database) {

            Dictionary<TableKey, DatabaseTable> dbTableLookup = new Dictionary<TableKey, DatabaseTable>();

            foreach(DatabaseTable table in tableList) {
                dbTableLookup.Add(new TableKey(table.Schema, table.TableName), table);
            }

            TableConstraintsTable tableConstraints = TableConstraintsTable.Instance;
            KeyColumnUsageTable keyColumnUsage = KeyColumnUsageTable.Instance;

            var result = Query
                .Select(
                    row => new {
                        Table_schema = row.Get(keyColumnUsage.Table_schema),
                        Table_name = row.Get(keyColumnUsage.Table_name),
                        Column_name = row.Get(keyColumnUsage.Column_name),
                        Constraint_Name = row.Get(tableConstraints.Constraint_name)
                    }
                )
                .From(tableConstraints)
                .Join(keyColumnUsage).On(
                    tableConstraints.Table_schema == keyColumnUsage.Table_schema &
                    tableConstraints.Table_name == keyColumnUsage.Table_name &
                    tableConstraints.Constraint_name == keyColumnUsage.Constraint_name
                )
                .Where(
                    tableConstraints.Constraint_type == "PRIMARY KEY" &
                    keyColumnUsage.Ordinal_position.IsNotNull
                //&
                //tableConstraints.Table_schema != StringKey<ISchemaName>.ValueOf("pg_catalog") &
                //tableConstraints.Table_schema != StringKey<ISchemaName>.ValueOf("information_schema")
                )
                .OrderBy(keyColumnUsage.Ordinal_position)
                .Execute(database, TimeoutLevel.ShortSelect);

            foreach(var row in result.Rows) {

                DatabaseTable table = dbTableLookup[new TableKey(row.Table_schema, row.Table_name)];

                if(table.PrimaryKey == null) {
                    table.PrimaryKey = new DatabasePrimaryKey(constraintName: row.Constraint_Name);
                }
                table.PrimaryKey.ColumnNames.Add(row.Column_name.Value);

                foreach(DatabaseColumn dbColumn in table.Columns) {

                    if(string.Compare(dbColumn.ColumnName.Value, row.Column_name.Value, ignoreCase: true) == 0) {
                        dbColumn.IsPrimaryKey = true;
                    }
                }
            }
        }

        private static void SetUniqueConstraints(List<DatabaseTable> tableList, IDatabase database) {

            Dictionary<TableKey, DatabaseTable> dbTableLookup = new Dictionary<TableKey, DatabaseTable>();

            foreach(DatabaseTable table in tableList) {
                dbTableLookup.Add(new TableKey(table.Schema, table.TableName), table);
            }

            TableConstraintsTable tableConstraints = TableConstraintsTable.Instance;
            KeyColumnUsageTable keyColumnUsage = KeyColumnUsageTable.Instance;

            var result = Query
                .Select(
                    row => new {
                        Table_schema = row.Get(keyColumnUsage.Table_schema),
                        Table_name = row.Get(keyColumnUsage.Table_name),
                        Column_name = row.Get(keyColumnUsage.Column_name),
                        Constraint_Name = row.Get(tableConstraints.Constraint_name)
                    }
                )
                .From(tableConstraints)
                .Join(keyColumnUsage).On(
                    tableConstraints.Table_schema == keyColumnUsage.Table_schema &
                    tableConstraints.Table_name == keyColumnUsage.Table_name &
                    tableConstraints.Constraint_name == keyColumnUsage.Constraint_name
                )
                .Where(
                    tableConstraints.Constraint_type == "UNIQUE" &
                    keyColumnUsage.Ordinal_position.IsNotNull
                //&
                //tableConstraints.Table_schema != StringKey<ISchemaName>.ValueOf("pg_catalog") &
                //tableConstraints.Table_schema != StringKey<ISchemaName>.ValueOf("information_schema")
                )
                .OrderBy(keyColumnUsage.Ordinal_position)
                .Execute(database, TimeoutLevel.ShortSelect);

            Dictionary<Key<TableKey, string>, DatabaseUniqueConstraint> dbUniqueConstraintLookup = new Dictionary<Key<TableKey, string>, DatabaseUniqueConstraint>();

            foreach(var row in result.Rows) {

                TableKey tableKey = new TableKey(row.Table_schema, row.Table_name);

                DatabaseTable table = dbTableLookup[tableKey];

                Key<TableKey, string> constraintKey = new Key<TableKey, string>(tableKey, row.Constraint_Name);

                if(!dbUniqueConstraintLookup.TryGetValue(constraintKey, out DatabaseUniqueConstraint? constraint)) {

                    constraint = new DatabaseUniqueConstraint(row.Constraint_Name);
                    table.UniqueConstraints.Add(constraint);
                    dbUniqueConstraintLookup.Add(constraintKey, constraint);
                }
                constraint.ColumnNames.Add(row.Column_name);
            }
        }

        private static void SetForeignKeys(List<DatabaseTable> tableList, IDatabase database) {

            Dictionary<TableKey, DatabaseTable> tableLookup = new Dictionary<TableKey, DatabaseTable>();
            Dictionary<TableColumnKey, DatabaseColumn> columnLookup = new Dictionary<TableColumnKey, DatabaseColumn>();

            foreach(DatabaseTable table in tableList) {

                tableLookup.Add(new TableKey(table.Schema, table.TableName), table);

                foreach(DatabaseColumn column in table.Columns) {

                    columnLookup.Add(new TableColumnKey(table.Schema, table.TableName, column.ColumnName), column);
                }
            }

            ReferentialConstraintsTable rcTable = ReferentialConstraintsTable.Instance;
            KeyColumnUsageTable foreignKcuTable = KeyColumnUsageTable.Instance;
            KeyColumnUsageTable uniqueKcuTable = KeyColumnUsageTable.Instance2;

            var result = Query
                .Select(
                    row => new {
                        FOREIGN_KEY_TABLE_SCHEMA = row.Get(foreignKcuTable.Table_schema),
                        FOREIGN_KEY_TABLE_NAME = row.Get(foreignKcuTable.Table_name),
                        FOREIGN_KEY_CONSTRAINT_NAME = row.Get(rcTable.CONSTRAINT_NAME),
                        FOREIGN_KEY_COLUMN_NAME = row.Get(foreignKcuTable.Column_name),
                        UNIQUE_KEY_TABLE_SCHEMA = row.Get(uniqueKcuTable.Table_schema),
                        UNIQUE_KEY_TABLE_NAME = row.Get(uniqueKcuTable.Table_name),
                        UNIQUE_KEY_COLUMN_NAME = row.Get(uniqueKcuTable.Column_name)
                    }
                )
                .From(rcTable)
                .Join(foreignKcuTable).On(
                    rcTable.CONSTRAINT_CATALOG == foreignKcuTable.Constraint_catalog &
                    rcTable.CONSTRAINT_SCHEMA == foreignKcuTable.Constraint_schema &
                    rcTable.CONSTRAINT_NAME == foreignKcuTable.Constraint_name
                )
                .Join(uniqueKcuTable).On(
                    rcTable.UNIQUE_CONSTRAINT_CATALOG == uniqueKcuTable.Constraint_catalog &
                    rcTable.UNIQUE_CONSTRAINT_SCHEMA == uniqueKcuTable.Constraint_schema &
                    rcTable.UNIQUE_CONSTRAINT_NAME == uniqueKcuTable.Constraint_name &
                    foreignKcuTable.Ordinal_position == uniqueKcuTable.Ordinal_position
                )
                .OrderBy(rcTable.CONSTRAINT_NAME, foreignKcuTable.Ordinal_position)
                .Execute(database);


            Dictionary<ForeignK, DatabaseForeignKey> dbForeignKeyLookup = new Dictionary<ForeignK, DatabaseForeignKey>();

            foreach(var row in result.Rows) {

                ForeignK fk = new ForeignK(row.FOREIGN_KEY_TABLE_SCHEMA, row.FOREIGN_KEY_TABLE_NAME, row.FOREIGN_KEY_CONSTRAINT_NAME);

                if(!dbForeignKeyLookup.TryGetValue(fk, out DatabaseForeignKey? foreignKey)) {

                    DatabaseTable foreignKeyTable = tableLookup[new TableKey(row.FOREIGN_KEY_TABLE_SCHEMA, row.FOREIGN_KEY_TABLE_NAME)];

                    foreignKey = new DatabaseForeignKey(row.FOREIGN_KEY_CONSTRAINT_NAME, foreignKeyTable);

                    foreignKeyTable.ForeignKeys.Add(foreignKey);
                    dbForeignKeyLookup.Add(fk, foreignKey);
                }

                TableColumnKey foreignKeyColumnKey = new TableColumnKey(row.FOREIGN_KEY_TABLE_SCHEMA, row.FOREIGN_KEY_TABLE_NAME, row.FOREIGN_KEY_COLUMN_NAME);
                DatabaseColumn foreignKeyColumn = columnLookup[foreignKeyColumnKey];

                TableColumnKey referencedColumnKey = new TableColumnKey(row.UNIQUE_KEY_TABLE_SCHEMA, row.UNIQUE_KEY_TABLE_NAME, row.UNIQUE_KEY_COLUMN_NAME);
                DatabaseColumn primaryKeyColumn = columnLookup[referencedColumnKey];

                foreignKey.References.Add(new DatabaseForeignKeyReference(foreignKeyColumn: foreignKeyColumn, primaryKeyColumn: primaryKeyColumn));
            }
        }

        private static void LoadCommentMetaData(List<DatabaseTable> tableList, IDatabase database) {

            Dictionary<TableKey, DatabaseTable> tableLookup = new Dictionary<TableKey, DatabaseTable>();
            Dictionary<TableColumnKey, DatabaseColumn> columnLookup = new Dictionary<TableColumnKey, DatabaseColumn>();

            foreach(DatabaseTable table in tableList) {

                tableLookup.Add(new TableKey(table.Schema, table.TableName), table);

                foreach(DatabaseColumn column in table.Columns) {

                    columnLookup.Add(new TableColumnKey(table.Schema, table.TableName, column.ColumnName), column);
                }
            }

            {
                TablesTable tablesTable = TablesTable.Instance;
                RawSqlFunction<string> obj_Description = new RawSqlFunction<string>(sql: "pg_catalog.obj_description((table_schema || '.' || quote_ident(table_name))::regclass)");

                var result = Query
                    .Select(
                        row => new {
                            tableSchema = row.Get(tablesTable.Table_schema),
                            tableName = row.Get(tablesTable.Table_name),
                            description = row.Get(obj_Description)
                        }
                    )
                    .From(tablesTable)
                    .Where(
                        tablesTable.Table_type == "BASE TABLE" &
                        //tablesTable.Table_schema != StringKey<ISchemaName>.ValueOf("pg_catalog") &
                        //tablesTable.Table_schema != StringKey<ISchemaName>.ValueOf("information_schema") &
                        obj_Description.IsNotNull
                    )
                    .Execute(database);

                foreach(var tableDesc in result.Rows) {

                    TableKey tableKey = new TableKey(tableDesc.tableSchema, tableDesc.tableName);

                    if(tableLookup.TryGetValue(tableKey, out DatabaseTable? table)) {

                        table.Description = tableDesc.description;
                    }
                }
            }

            {

                ColumnsTable columnsTable = ColumnsTable.Instance;
                RawSqlFunction<string> column_Obj_Description = new RawSqlFunction<string>(sql: "pg_catalog.col_description((table_schema||'.'||quote_ident(table_name))::regclass, ordinal_position)");

                var result = Query
                    .Select(
                        row => new {
                            tableSchema = row.Get(columnsTable.Table_schema),
                            tableName = row.Get(columnsTable.Table_name),
                            columnName = row.Get(columnsTable.Column_name),
                            description = row.Get(column_Obj_Description)
                        }
                    )
                    .From(columnsTable)
                    .Where(
                        column_Obj_Description.IsNotNull
                    //&
                    //columnsTable.Table_schema != StringKey<ISchemaName>.ValueOf("pg_catalog") &
                    //columnsTable.Table_schema != StringKey<ISchemaName>.ValueOf("information_schema")
                    )
                    .Execute(database);

                foreach(var columnDesc in result.Rows) {

                    TableColumnKey columnKey = new TableColumnKey(columnDesc.tableSchema, columnDesc.tableName, columnDesc.columnName);

                    if(columnLookup.TryGetValue(columnKey, out DatabaseColumn? column)) {
                        column.Description = columnDesc.description;
                    }
                }
            }
        }

        private sealed class ForeignK {

            private readonly StringKey<ISchemaName> SchemaName;
            private readonly StringKey<ITableName> TableName;
            private readonly string ConstraintName;

            public ForeignK(StringKey<ISchemaName> schemaName, StringKey<ITableName> tableName, string constraintName) {
                SchemaName = schemaName;
                TableName = tableName;
                ConstraintName = constraintName;
            }

            public override bool Equals(object? obj) {

                if(obj is ForeignK key) {
                    return SchemaName.Value == key.SchemaName.Value && TableName.Value == key.TableName.Value && key.ConstraintName == ConstraintName;
                }
                else {
                    return false;
                }
            }
            public override int GetHashCode() {
                return (SchemaName.Value + "^" + TableName.Value).GetHashCode();
            }
        }
    }

    public static class PostgreSqlTypes {

        private static readonly Dictionary<string, Type?> _Lookup = new Dictionary<string, Type?>(StringComparer.OrdinalIgnoreCase);

        static PostgreSqlTypes() {

            _Lookup.Add("anyarray", null);
            _Lookup.Add("inet", null);
            _Lookup.Add("_text", typeof(string));
            _Lookup.Add("xid", typeof(int));
            _Lookup.Add("_char", typeof(string));
            _Lookup.Add("name", typeof(string));
            _Lookup.Add("oidvector", null);
            _Lookup.Add("_aclitem", null);
            _Lookup.Add("int2vector", null);
            _Lookup.Add("_int2", typeof(short));
            _Lookup.Add("interval", null);
            _Lookup.Add("abstime", null);
            _Lookup.Add("_regtype", null);
            _Lookup.Add("ARRAY", null);
            _Lookup.Add("bytea", typeof(byte[]));
            _Lookup.Add("date", typeof(DateOnly));
            _Lookup.Add("time", typeof(TimeOnly));
            _Lookup.Add("timestamptz", typeof(DateTimeOffset));
            _Lookup.Add("integer", typeof(int));
            _Lookup.Add("int4", typeof(int));
            _Lookup.Add("int8", typeof(long));
            _Lookup.Add("uuid", typeof(Guid));
            _Lookup.Add("_float4", typeof(float));
            _Lookup.Add("char", typeof(string));
            _Lookup.Add("\"char\"", typeof(string));
            _Lookup.Add("bool", typeof(bool));
            _Lookup.Add("float4", typeof(float));
            _Lookup.Add("float8", typeof(double));
            _Lookup.Add("int2", typeof(short));
            _Lookup.Add("_oid", typeof(uint));
            _Lookup.Add("oid", typeof(uint));
            _Lookup.Add("regproc", typeof(uint));
            _Lookup.Add("regprocedure", typeof(uint));
            _Lookup.Add("regoper", typeof(uint));
            _Lookup.Add("regoperator", typeof(uint));
            _Lookup.Add("regclass", typeof(uint));
            _Lookup.Add("regtype", typeof(uint));
            _Lookup.Add("regconfig", typeof(uint));
            _Lookup.Add("regdictionary", typeof(uint));
            _Lookup.Add("varchar", typeof(string));
            _Lookup.Add("character", typeof(string));
            _Lookup.Add("bpchar", typeof(string));
            _Lookup.Add("text", typeof(string));
            _Lookup.Add("timestamp", typeof(DateTime));
            _Lookup.Add("numeric", typeof(decimal));
            _Lookup.Add("boolean", typeof(bool));
            _Lookup.Add("smallint", typeof(short));
            _Lookup.Add("time without time zone", typeof(TimeOnly));
            _Lookup.Add("timestamp with time zone", typeof(DateTimeOffset));
            _Lookup.Add("timestamp without time zone", typeof(DateTime));
            _Lookup.Add("real", typeof(float));
            _Lookup.Add("bigint", typeof(long));
            _Lookup.Add("double precision", typeof(double));
            _Lookup.Add("character varying", typeof(string));
            _Lookup.Add("xml", typeof(string));

            //_Lookup.Add("pg_lsn", typeof(long));
        }
        public static Type? GetDotNetType(string typeName) {

            if(!_Lookup.TryGetValue(typeName, out Type? dotNetType)) {
                return null;
            }
            return dotNetType;
        }
    }
}