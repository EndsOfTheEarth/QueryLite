using System;

namespace QueryLite.DbSchema.CodeGeneration {

    public static class FluentValidationGenerator {

        public static CodeBuilder GenerateFluentValidationCode(IDatabase database, DatabaseTable table, TablePrefix prefix, bool useIdentifiers, Namespaces namespaces) {

            CodeBuilder classCode = new CodeBuilder();

            classCode.Append($"namespace {namespaces.ClassNamespace} {{").EndLine().EndLine();
            classCode.Indent(1).Append("using System;").EndLine();
            classCode.Indent(1).Append("using FluentValidation;").EndLine();
            classCode.Indent(1).Append($"using {namespaces.TableNamespace};").EndLine();

            string className = CodeHelper.GetTableName(table, includePostFix: false);

            classCode.EndLine();

            CodeBuilder validateCode = new CodeBuilder();

            string validateClassName = className + "Validator";

            validateCode.Indent(1).Append($"public sealed class {validateClassName} : AbstractValidator<{className}> {{").EndLine();
            validateCode.EndLine();

            bool includeIsNew = false;

            foreach(DatabaseColumn column in table.Columns) {

                if(column.IsAutoGenerated) {
                    includeIsNew = true;
                    break;
                }
            }

            validateCode.Indent(2).Append($"public {validateClassName}({(includeIsNew ? "bool isNew" : "")}) {{").EndLine();
            validateCode.EndLine();

            foreach(DatabaseColumn column in table.Columns) {

                CodeHelper.GetColumnName(table, column, useIdentifiers: useIdentifiers, dotNetType: out Type dotNetType, columnTypeName: out string _, out bool isKeyColumn);

                string columnName = prefix.GetColumnName(column.ColumnName.Value);

                if(column.IsAutoGenerated) {

                    validateCode.Indent(3).Append("if(isNew) {").EndLine();

                    if(isKeyColumn) {

                        validateCode.Indent(4).Append($"RuleFor(_x => _x.{columnName})");
                        validateCode.EndLine().Indent(5).Append($".Cascade(CascadeMode.Stop)");
                        validateCode.EndLine().Indent(5).Append($".NotNull()");
                        validateCode.EndLine().Indent(5).Append($".Must({columnName} => !{columnName}.IsValid)");
                        validateCode.EndLine().Indent(5).Append($".WithMessage(\"{columnName} must not be valid when creating a record as it is auto generated\");").EndLine();
                    }
                    else {
                        validateCode.Indent(4).Append($"RuleFor(_x => _x.{columnName})");
                        validateCode.EndLine().Indent(5).Append($".NotNull();").EndLine();
                    }
                    validateCode.Indent(3).Append("}").EndLine();
                    validateCode.Indent(3).Append("else {").EndLine();
                    validateCode.Indent(4).Append($"RuleFor(_x => _x.{columnName}).NotNull();").EndLine();
                    validateCode.Indent(3).Append("}").EndLine().EndLine();
                }

                CodeBuilder rule = new CodeBuilder();
                rule.Indent(3).Append($"RuleFor(_x => _x.{columnName})");

                bool hasRule = false;

                //column.DataType.DotNetType.
                
                if(!column.IsAutoGenerated && !column.IsNullable && !column.DataType.DotNetType.IsValueType) {
                    rule.Append(".NotNull()");
                    hasRule = true;
                }

                bool addBeginAndEndLine = false;

                if(column.Length != null) {

                    if(dotNetType == typeof(string) && !isKeyColumn) {
                        rule.Append($".Length(min:0, max: {CodeHelper.GetTableName(table, includePostFix: true)}.Instance.{columnName}.Length!.Value)");
                    }
                    else {

                        rule.EndLine().Indent(4);
                        rule.Append($".Must(value => ");

                        string maxLength = $"{CodeHelper.GetTableName(table, includePostFix: true)}.Instance.{columnName}.Length!.Value";

                        if(column.IsNullable) {

                            addBeginAndEndLine = true;

                            string valueType = string.Empty;

                            if(dotNetType.IsValueType) {
                                valueType = ".Value";
                            }
                            if(isKeyColumn) {
                                valueType = ".Value.Value";
                            }
                            rule.Append($"value!{valueType}.Length >= 0 && value{valueType}.Length <= {maxLength})");
                            rule.EndLine().Indent(4);
                            rule.Append($".When(_x => _x.{columnName} != null)");
                        }
                        else {
                            string valueType = isKeyColumn ? ".Value" : "";
                            rule.Append($"value{valueType}.Length >= 0 && value{valueType}.Length <= {maxLength})");
                        }
                        rule.EndLine().Indent(4);
                        rule.Append($".WithMessage($\"{columnName} length must be between 0 and {{ {maxLength} }}\")");
                    }
                    hasRule = true;
                }

                rule.Append(";");

                if(hasRule) {
                    if(addBeginAndEndLine) {
                        validateCode.EndLine();
                    }
                    validateCode.Append(rule.ToString()).EndLine();
                    if(addBeginAndEndLine) {
                        validateCode.EndLine();
                    }
                }
            }

            validateCode.Indent(2).Append("}").EndLine();
            validateCode.Indent(1).Append("}").EndLine();

            classCode.Append(validateCode.ToString());

            classCode.Append("}");
            return classCode;
        }
    }
}