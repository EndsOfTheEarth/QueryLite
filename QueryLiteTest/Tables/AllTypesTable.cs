
namespace QueryLiteTest.Tables {

    using System;
    using QueryLite;
    using QueryLiteTestLogic;

    public sealed class AllTypesTable : ATable {

        public static readonly AllTypesTable Instance = new AllTypesTable();
        public static readonly AllTypesTable Instance2 = new AllTypesTable();
        public static readonly AllTypesTable Instance3 = new AllTypesTable();
        public static readonly AllTypesTable Instance4 = new AllTypesTable();

        [PrimaryKey("pk_TableA")]
        public Column<IntKey<AllTypes>> Id { get; }
        public Column<Guid> Guid { get; }
        public Column<string> String { get; }
        public Column<short> SmallInt { get; }
        public Column<int> Int { get; }
        public Column<long> BigInt { get; }
        public Column<decimal> Decimal { get; }
        public Column<float> Float { get; }
        public Column<double> Double { get; }
        public Column<bool> Boolean { get; }
        public Column<byte[]> Bytes { get; }
        public Column<DateTime> DateTime { get; }
        public Column<DateTimeOffset> DateTimeOffset { get; }
        public Column<AllTypesEnum> Enum { get; }
        public Column<DateOnly> DateOnly { get; }
        public Column<TimeOnly> TimeOnly { get; }

        private AllTypesTable() : base(tableName: "AllTypes", schemaName: "dbo") {

            Id = new Column<IntKey<AllTypes>>(this, columnName: "taId", isPrimaryKey: true, isAutoGenerated: true);
            Guid = new Column<Guid>(this, columnName: "taGuid");
            String = new Column<string>(this, columnName: "taString", length: 100);
            SmallInt = new Column<short>(this, columnName: "taSmallInt");
            Int = new Column<int>(this, columnName: "taInt");
            BigInt = new Column<long>(this, columnName: "taBigInt");
            Decimal = new Column<decimal>(this, columnName: "taDecimal");
            Float = new Column<float>(this, columnName: "taFloat");
            Double = new Column<double>(this, columnName: "taDouble");
            Boolean = new Column<bool>(this, columnName: "taBoolean");
            Bytes = new Column<byte[]>(this, columnName: "taBytes", length: int.MaxValue);
            DateTime = new Column<DateTime>(this, columnName: "taDateTime");
            DateTimeOffset = new Column<DateTimeOffset>(this, columnName: "taDateTimeOffset");
            Enum = new Column<AllTypesEnum>(this, columnName: "taEnum");
            DateOnly = new Column<DateOnly>(this, columnName: "taDateOnly");
            TimeOnly = new Column<TimeOnly>(this, columnName: "taTimeOnly");
        }
    }

    public sealed class AllTypesInfo {

        public AllTypesInfo() { }

        public AllTypesInfo(IResultRow result, AllTypesTable table) {
            Id = result.Get(table.Id);
            Guid = result.Get(table.Guid);
            String = result.Get(table.String);
            SmallInt = result.Get(table.SmallInt);
            Int = result.Get(table.Int);
            BigInt = result.Get(table.BigInt);
            Decimal = result.Get(table.Decimal);
            Float = result.Get(table.Float);
            Double = result.Get(table.Double);
            Boolean = result.Get(table.Boolean);
            Bytes = result.Get(table.Bytes);
            DateTime = result.Get(table.DateTime);
            DateTimeOffset = result.Get(table.DateTimeOffset);
            Enum = result.GetEnum(table.Enum);
            DateOnly = result.Get(table.DateOnly);
            TimeOnly = result.Get(table.TimeOnly);
        }

        public IntKey<AllTypes> Id { get; set; }
        public Guid Guid { get; set; }
        public string String { get; set; } = string.Empty;
        public short SmallInt { get; set; }
        public int Int { get; set; }
        public long BigInt { get; set; }
        public decimal Decimal { get; set; }
        public float Float { get; set; }
        public double Double { get; set; }
        public bool Boolean { get; set; }
        public byte[] Bytes { get; set; } = Array.Empty<byte>();
        public DateTime DateTime { get; set; }
        public DateTimeOffset DateTimeOffset { get; set; }
        public AllTypesEnum Enum { get; set; }
        public DateOnly DateOnly { get; set; }
        public TimeOnly TimeOnly { get; set; }
    }
}